from randomOrderApplier import RandomOrderApply
from randomOrderApplier import RANDOM, INVERSE_VAR_ORDER_LR, INVERSE_VAR_ORDER_RL, \
    SMALLEST_FIRST, VTREESPLIT, VTREESPLIT_WITH_SMALLEST_FIRST, VTREE_VARIABLE_ORDERING, \
    ELEMENT_UPPERBOUND
from randomOrderApplier import OR, AND
import matplotlib.pyplot as plt

import timeit
import numpy
heuristicDict = {RANDOM: "Random", SMALLEST_FIRST: "Smallest first", VTREESPLIT: "Vtree split", 
                 ELEMENT_UPPERBOUND: "element upperbound", VTREESPLIT_WITH_SMALLEST_FIRST: "Vtree split + smallest first", 
                 VTREE_VARIABLE_ORDERING: "Vtree var-order", INVERSE_VAR_ORDER_LR: "Inverse var-order LR",
                 INVERSE_VAR_ORDER_RL: "Inverse var-order RL"}
def getHeuristicName(heuristicInt):
    return heuristicDict[heuristicInt]

def doRandomOrderTest(nrOfIterations, randomApplier, operation):
    sizeLists = []
    for _ in range(nrOfIterations):
        # sdds = randomApplier.loadBaseSdds()
        (_, sizeList, _) = randomApplier.doHeuristicApply(RANDOM, operation)
        sizeLists.append(sizeList)
    return sizeLists

def randomOrderCompSizeVariation(operation):
    nrOfSdds=20
    nrOfVars=16
    nrOfIterationsPerSdd = 100
    listNrOfClauses=list(tuple(range(5, int(nrOfVars*5), 5)))
    operationStr = "OR" if operation == OR else "AND"
    with open(f"output/randomOrderCompTimeVariation_{nrOfSdds}_{nrOfVars}_{operationStr}.txt", 'w') as file:
        file.write(f"experiment: sdds: {nrOfSdds}, vars: {nrOfVars}, operation = {operationStr}" + '\n')
        for nrOfClauses in listNrOfClauses:
            print(nrOfClauses)
            randomApplier = RandomOrderApply(nrOfSdds, nrOfVars, nrOfClauses, vtree_type="balanced")
            times = doRandomOrderTest(nrOfIterationsPerSdd, randomApplier, operation)
            file.write(f"voor {nrOfClauses} clauses {times}\n")

def doHeuristicTest(heuristics, randomApplier, operation):
    sizeListsHeuristics = []
    for heur in heuristics:
        (_, sizeList, _) = randomApplier.doHeuristicApply(heur, operation)
        sizeListsHeuristics.append(sizeList)
    return sizeListsHeuristics


def heuristicsApply(nrOfClauses, heuristics, operation):
    nrOfSdds=20
    nrOfVars=16
    iterations = 1
    vtree = "right"
    operationStr = "OR" if operation == OR else "AND"
    with open(f"output/randomVsHeuristic_{nrOfSdds}_{nrOfVars}_{nrOfClauses}_{operationStr}_{vtree}_{heuristics}.txt", 'w') as file:
        file.write(f"experiment: sdds: {nrOfSdds}, vars: {nrOfVars}, operation = {operationStr}, vtree = {vtree}, heuristiek = {heuristics}" + '\n')
        randomApplier = RandomOrderApply(nrOfSdds, nrOfVars, nrOfClauses, vtree_type=vtree)
        for i in range(iterations):
            randomApplier.renew()
            sizeListsHeuristics = doHeuristicTest(heuristics, randomApplier, operation)
            for (heur, sizeList) in zip(heuristics, sizeListsHeuristics):
                plt.plot(range(nrOfSdds-1), sizeList, marker='o', \
                         linestyle='-', label=getHeuristicName(heur))
            plt.xlabel('index tussenresultaat')
            plt.ylabel('size van tussenresultaat')
            plt.title("Variatie in tussenresultaatSizes")
            plt.legend()
            plt.yscale('log')
            plt.show()
            # plt.savefig(f"figs/randomVariation/randomOrder_20_{nrOfVars}_{nrOfClauses}_{operation}.png") #savefig moet blijkbaar voor show() komen
            plt.clf()


def __main__():
    #heuristieken: RANDOM, SMALLEST_FIRST, VTREESPLIT, VTREESPLIT_WITH_SMALLEST_FIRST, VTREE_VARIABLE_ORDERING, ELEMENT_UPPERBOUND
    heuristics = [VTREESPLIT_WITH_SMALLEST_FIRST, VTREE_VARIABLE_ORDERING, ELEMENT_UPPERBOUND, INVERSE_VAR_ORDER_LR, INVERSE_VAR_ORDER_RL]
    operation = OR 
    for i in range(2, 80, 2):
        print(f"nr of clauses = {i}")
        heuristicsApply(i, heuristics, operation)
        
__main__()